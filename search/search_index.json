{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"guidelines/","title":"Contributing to UA Smart Signage","text":"<p>Welcome to UA Smart Signage! We appreciate your interest in contributing. Before you get started, please take a moment to review the following guidelines.</p>"},{"location":"guidelines/#reporting-bugs","title":"Reporting Bugs","text":""},{"location":"guidelines/#server-repository","title":"Server Repository","text":"<ol> <li>Ensure the bug has not already been reported by checking the Issues section.</li> <li>If the bug has not been reported, open a new issue. Please use the provided pull request template to ensure all necessary information is included.</li> <li>Provide a clear and detailed description of the bug, including steps to reproduce it.</li> <li>Include any relevant screenshots or error messages.</li> </ol>"},{"location":"guidelines/#media-player-repository","title":"Media Player Repository","text":"<ol> <li>Ensure the bug has not already been reported by checking the Issues section.</li> <li>If the bug has not been reported, open a new issue. Please use the provided pull request template to ensure all necessary information is included.</li> <li>Provide a clear and detailed description of the bug, including steps to reproduce it.</li> <li>Include any relevant logs or error messages.</li> </ol>"},{"location":"guidelines/#proposing-new-features","title":"Proposing New Features","text":"<p>We welcome suggestions for new features or enhancements to UA Smart Signage. To propose a new feature, please follow these steps:</p>"},{"location":"guidelines/#server-repository_1","title":"Server Repository","text":"<ol> <li>Open a new issue in the Issues section.</li> <li>Use the provided feature request template to describe the proposed feature or enhancement in detail.</li> <li>Explain the rationale behind the feature and how it would benefit the project.</li> <li>Be open to feedback and discussion from the community.</li> </ol>"},{"location":"guidelines/#media-player-repository_1","title":"Media Player Repository","text":"<ol> <li>Open a new issue in the Issues section.</li> <li>Use the provided feature request template to describe the proposed feature or enhancement in detail.</li> <li>Explain the rationale behind the feature and how it would benefit the project.</li> <li>Be open to feedback and discussion from the community.</li> </ol>"},{"location":"guidelines/#running-tests-and-setting-up-your-environment","title":"Running Tests and Setting Up Your Environment","text":"<p>Before contributing code changes to UA Smart Signage, it's important to ensure that your environment is properly set up and that all tests pass. Here's how to do it:</p> <ol> <li> <p>Clone the Server repository from GitHub:</p> <pre><code>git clone https://github.com/UA-Smart-Signage-Platform/Content-Manager-System-and-Content-Creator-Tool\n</code></pre> </li> <li> <p>Install any necessary dependencies by following the instructions in the README.md file.</p> </li> <li> <p>Run the tests to ensure everything is functioning correctly. You can do this by executing the following command:</p> <pre><code>./mvnw clean verify\n</code></pre> </li> <li> <p>If any tests fail, investigate the issue and make necessary corrections before proceeding.</p> </li> </ol>"},{"location":"guidelines/#code-style-and-conventions","title":"Code Style and Conventions","text":"<p>Please adhere to the coding style and conventions used throughout the project. This includes:</p> <ul> <li>Following the style guide for the programming language used in the project.</li> <li>Writing clear, concise, and well-documented code.</li> <li>Using meaningful variable names and comments where necessary.</li> </ul>"},{"location":"guidelines/#definition-of-done-dod","title":"Definition of Done (DOD)","text":"<p>The Definition of Done (DOD) outlines the criteria that must be met for a task to be considered complete. It ensures that all contributions to UA Smart Signage meet a consistent standard of quality and completeness. Below is our Definition of Done:</p> <ol> <li>Functionality Implemented: The code must implement the desired functionality as described in the task or user story.</li> <li>Unit Tests Written: Unit tests covering the implemented functionality must be written and passing.</li> <li>Code Reviewed: The code must undergo a review by at least one other team member to ensure quality, readability, and adherence to coding standards.</li> <li>Documentation Updated: Any relevant documentation, including README files, API documentation, and comments within the code, must be updated to reflect changes introduced by the contribution.</li> <li>Integration Tests Passed: If applicable, integration tests must be executed, and all relevant tests must pass.</li> <li>Quality Assurance (QA) Testing: The contribution must undergo QA testing to verify its correctness, usability, and compatibility with other components of UA Smart Signage.</li> <li>Peer Approval: A peer must approve the completion of the task based on the above criteria.</li> </ol> <p>By adhering to this Definition of Done, we ensure that all contributions meet the required standards of quality and readiness for deployment.</p>"},{"location":"pi/","title":"Informatics Project","text":""},{"location":"pi/#project-proposal","title":"Project Proposal","text":"<ul> <li>A Digital Signage System for DETI</li> </ul>"},{"location":"pi/#inception-phase","title":"Inception Phase","text":"<ul> <li>M1: Inception Phase Presentation</li> </ul>"},{"location":"pi/#context","title":"Context","text":"<p>As technology evolves, so does our mode of communication. In the past, a simple piece of paper with a few words could effectively convey an idea. However, in today's fast-paced environment, things change rapidly. Ideas evolve, new developments arise, and the need to reach millions of people simultaneously may arise. Traditional signage is no longer the most efficient method of disseminating information; this is where digital signage steps in.</p> <p>No longer do we need to manually update room schedules or leave a paper notice indicating an ongoing meeting. No more basic videos with manual set up required. Digital signage handles these tasks seamlessly.</p>"},{"location":"pi/#problem","title":"Problem","text":""},{"location":"pi/#integration-with-the-universitys-idp","title":"Integration with the university\u2019s IDP","text":"<p>Incorporating university's IDP in our software is a key requirement for the final product. While implementing login based on the university's IDP might appear straightforward, it is likely to pose complexities given our unfamiliarity with this field. Moreover, such integration typically involves a time-consuming acceptance process, adding to its difficulty.</p>"},{"location":"pi/#test-driven-development-implementation","title":"Test driven development implementation","text":"<p>To mitigate future errors and ensure a seamless software development process, we will implement tests for our backend. These tests will be integrated into GitHub Actions, allowing us to identify errors before they are committed to more critical branches, thus enhancing the reliability of our codebase.</p>"},{"location":"pi/#user-friendly-content-creation-tool-cct","title":"User friendly Content Creation Tool (CCT)","text":"<p>Designing a user-friendly interface is a complex endeavor. Developing user-friendly software presents an even greater challenge, as it necessitates concealing numerous complex operations. Crafting a user-friendly interface and software that empowers users to create their own templates will undoubtedly be a formidable task.</p>"},{"location":"pi/#good-documentation-and-installation-guides","title":"Good documentation and installation guides","text":"<p>Given that this project is intended for continuous development and enhancement over the years, it is imperative to establish comprehensive and dedicated documentation, including clear guidelines for both usage and installation.</p>"},{"location":"pi/#scalability-and-performance","title":"Scalability and Performance","text":"<p>At the outset, we will operate with only a few computers, rendering scalability and performance less pressing concerns. Nevertheless, considering the ultimate goal of deploying this project university-wide, it is crucial to anticipate and strategize the design and development of our system in a scalable manner without sacrificing performance or necessitating an excessively powerful server.</p>"},{"location":"pi/#goals","title":"Goals","text":""},{"location":"pi/#manage-electronic-displays-remotely","title":"Manage electronic displays remotely.","text":"<p>Our system must be a centralized system with distributed components.</p> <ul> <li> <p>Centralized System: The main server with the database and software acts as a central hub where data is stored and processed. This centralization provides a single point of control and management for the system.</p> </li> <li> <p>Distributed Components: Information is transmitted to Raspberry Pis via the network, facilitated by a broker. These Raspberry Pis function as endpoints, receiving and requesting data from the central server. They are capable of performing additional processing or executing actions based on the received information.</p> </li> </ul>"},{"location":"pi/#have-a-media-player-that-allows-for-displaying-content-and-receive-real-time-updates-from-different-sources","title":"Have a Media Player that allows for displaying content and receive real time updates from different sources.","text":"<p>We are required to implement a Media Player capable of seamlessly displaying content and receiving real-time updates from diverse sources.</p>"},{"location":"pi/#have-a-content-management-system-to-manage-all-the-screens-and-allow-scheduling-and-timing-of-content-playback","title":"Have a Content Management System to manage all the screens and allow scheduling and timing of content playback.","text":"<p>Develop a robust Content Management System (CMS) empowering administrators to monitor screen statuses and logs, while providing users with the capability to schedule content playback at specific times and chosen templates.</p>"},{"location":"pi/#create-a-content-creation-tool-that-assists-the-users-designing-the-templates","title":"Create a Content Creation Tool that assists the users designing the templates.","text":"<p>As mentioned earlier, we require user-friendly software that effortlessly provides all the necessary tools for creating and manipulating templates.</p>"},{"location":"pi/#expected-results","title":"Expected Results","text":""},{"location":"pi/#minimal-viable-product-mvp-of-a-digital-signage-system","title":"Minimal Viable Product (MVP) of a Digital Signage System","text":"<p>The functionalities that are expected from us are a software that allow for monitoring, adding, manipulating and configure display of monitors. IDP integration and CCT is a challenge, but doable ones.</p>"},{"location":"pi/#user-friendly-content-management-system-cms-and-content-creation-tool-cct","title":"User-friendly Content Management System (CMS) and Content Creation Tool (CCT)","text":"<p>Both a user-friendly CMS and CCT is expected from us by the end of the project. These tools have to be built in a way that provide scalability and easy understanding.</p>"},{"location":"pi/#integration-with-the-universitys-idp_1","title":"Integration with the university\u2019s IDP","text":"<p>Our project requires login to be based on university's IDP.</p>"},{"location":"pi/#os-image-that-auto-boots-into-the-media-player-upon-startup","title":"OS image that auto-boots into the Media Player upon startup","text":"<p>We need an OS image programmed to boot our software automatically, initiating communication with our backend upon network connection.</p>"},{"location":"pi/#all-the-code-should-include-tests-and-comments","title":"All the code should include tests and comments","text":"<p>Every piece of code must be accompanied by thorough testing suites and if a function's name lacks clarity, ensure comprehensive testing and comments are provided to elucidate its purpose and functionality.</p>"},{"location":"pi/#clear-documentation-and-contribution-guidelines","title":"Clear documentation and contribution guidelines","text":"<p>Due to its open-source nature, ensure transparent and accessible documentation along with contribution guidelines, allowing next students or professionals to have an easy time to build upon our software.</p>"},{"location":"pi/#task-list","title":"Task list","text":"<ul> <li>Raspberry pi configuration</li> <li>Template design/requirements</li> <li>Architecture development / System design and planning</li> <li>Content Distribution Strategy</li> <li>Communication plan (documentation)</li> <li>Tests (User acceptance and System)</li> <li>User friendly CCT</li> </ul>"},{"location":"pi/#calendar","title":"Calendar","text":"<p>Our initial calendar can be found in our M1 presentation; however, it provided only a broad overview of the problem. Therefore, we do not consider it as the definitive calendar. Instead, the following Calendar is more reliable.</p>"},{"location":"pi/#templates","title":"Templates","text":"<ul> <li>Media Player Display</li> </ul>"},{"location":"pi/#elaboration-phase","title":"Elaboration Phase","text":"<ul> <li>M2: Elaboration Phase Presentation</li> </ul>"},{"location":"pi/#comunication-plan","title":"Comunication Plan","text":"<p>The following table summarizes the recommended communication channel based on the purpose of communication:</p> Purpose Channel Real-time discussions, quick updates, task delegation and informal communication. Discord Formal communication, and information sharing. Outlook Code collaboration, version control, and issue tracking. Github <p>Detailed Use Cases</p> <ul> <li>Discord <ul> <li>Use Cases:<ul> <li>Team discussions for brainstorming, project updates, and ad-hoc questions.</li> <li>Assigning tasks and tracking progress.</li> <li>Sharing quick wins, announcements, and real-time project status updates.</li> </ul> </li> </ul> </li> <li>Outlook <ul> <li>Use Cases:<ul> <li>Sending official emails, meeting information, and project reports.</li> </ul> </li> </ul> </li> <li>Github <ul> <li>Use Cases:<ul> <li>Hosting code repositories, managing changes, and tracking development progress.</li> <li>Reporting bugs, requesting features, and collaborating on code solutions.</li> <li>Maintaining a central location for project files and documentation.</li> </ul> </li> </ul> </li> </ul>"},{"location":"pi/#organization","title":"Organization","text":"<p>UA Smart Signage</p> <p>Repositories</p> <ul> <li>Documentation Website</li> <li>Content Manager System and Content Creator Tool</li> <li>Media Player</li> </ul>"},{"location":"pi/#context-and-state-of-the-art-soa","title":"Context and State of The Art (SOA)","text":"<p>In the context of digital signage Aveiro University (UA) has been using static display for videos and information in televisions across all monitors within the Department of Eletronics, Telecommunications and Informatics (DETI). No prior software has been developed in this regard within UA.</p> <p>To display videos, DETI is currently using a Media Player on a windows machine to display them. Due to its limitations we are building a software from the ground with a flexible structure, schedule functionality and dynamic information display.</p> <p>The project aims to build a system that will be used over the years and done in a way that can be improved and built on easily.</p>"},{"location":"pi/#functional-requirements","title":"Functional Requirements","text":"<p>Content Management:</p> <ul> <li>Ability to upload, manage and organize content.</li> <li>Support for various media formats (images, videos, text).</li> <li>Content scheduling for specific times or events.</li> </ul> <p>Display Management:</p> <ul> <li>Control over which screens display specific content.</li> <li>Grouping of screens.</li> <li>Support for remote display management and configuration.</li> </ul> <p>Integration:</p> <ul> <li>Integration with external data sources (RSS feeds, social media, APIs) for dynamic content.</li> <li>Compatibility with various screen types.</li> </ul> <p>User Interface:</p> <ul> <li>Intuitive user interface for content management.</li> <li>Role-based access control for different users (administrators, content managers, etc.).</li> <li>Reporting and analytics features to track content performance and screen status.</li> </ul>"},{"location":"pi/#non-functional-requirements","title":"Non-Functional Requirements","text":"<p>Performance:</p> <ul> <li>Fast response times for content uploads and updates.</li> <li>Smooth playback without buffering or lag.</li> <li>Scalability to support a growing number of screens and users.</li> </ul> <p>Reliability:</p> <ul> <li>High availability to ensure screens are always operational.</li> <li>Fault tolerance to handle hardware failures or network issues.</li> <li>Disaster recovery capabilities to recover from system failures (backups).</li> </ul> <p>Security:</p> <ul> <li>User authentication and authorization mechanisms.</li> <li>Encryption of data during transmission and storage.</li> <li>Protection against unauthorized access and tampering of content.</li> </ul> <p>Scalability:</p> <ul> <li>Ability to scale the system as the number of screens or content volume increases.</li> </ul> <p>Usability:</p> <ul> <li>Support for localization.</li> </ul> <p>Compatibility:</p> <ul> <li>Compatibility with various operating systems and web browsers (raspi by construction should be always the same, react should be universal).</li> <li>Compliance with industry standards and protocols (HTML5 + RESTful APIs).</li> </ul>"},{"location":"pi/#personas","title":"Personas","text":"<p>Nuno - DETI Director</p> <ul> <li>Name: Nuno</li> <li>Age: 37</li> <li>Occupation: Technician</li> </ul> <p>Background:</p> <ul> <li>Seasoned university employee with over 15 years of experience.</li> <li>Recognized for administrative excellence and valued by colleagues.</li> <li>Limited experience with design aspects.</li> <li>Prefers user-friendly and straightforward technological platforms.</li> </ul> <p>Goals:</p> <ul> <li>Effortlessly share pre-made content, including:<ul> <li>News announcements</li> <li>Promotional videos</li> <li>Other relevant resources</li> </ul> </li> <li>Manage the displayed information through a simple and intuitive interface (add/remove screens).</li> </ul> <p>Note: Nuno's technical expertise lies primarily in administrative tasks. Aim to provide clear and concise instructions for content management.</p> <p>Sara - UI/UX Designer</p> <ul> <li>Name: Sara</li> <li>Age: 30</li> <li>Occupation: Designer</li> </ul> <p>Profile:</p> <ul> <li>Software: Prefers feature-rich and customizable tools to unleash her creative potential.</li> <li>Workflow: Values efficient tools that streamline design processes and enable quick production of high-quality content.</li> <li>Design Approach: Enjoys experimentation with various design elements and actively seeks new features and functionalities.</li> </ul> <p>Goals:</p> <ul> <li>Create engaging content specifically designed for display on DETI screens.</li> <li>Utilize her creativity to design unique templates for showcasing on designated displays.</li> </ul> <p>Rodrigo - DETI Student</p> <ul> <li>Name: Rodrigo</li> <li>Age: 19</li> </ul> <p>Background:</p> <ul> <li>Enthusiastic and curious student with a thirst for new knowledge and experiences.</li> <li>Actively seeks out relevant information related to academics, cultural events, and networking opportunities.</li> </ul> <p>Goals:</p> <ul> <li>Easy and swift access to crucial information concerning:<ul> <li>Coursework</li> <li>Academic events</li> <li>Extracurricular activities</li> </ul> </li> <li>Clear and organized presentation of information for staying updated on the go.</li> </ul>"},{"location":"pi/#use-cases","title":"Use Cases","text":""},{"location":"pi/#user-stories","title":"User Stories","text":""},{"location":"pi/#as-an-administrator","title":"As an administrator:","text":"<ul> <li>Edit Template Content: I want to edit template content so that I can keep it up-to-date.</li> <li>Schedule Content: I want to schedule specific content on digital screens at designated times and dates so that I can effectively manage content dissemination.</li> <li>Delete Templates: I want to delete templates so that I can remove outdated or unused content.</li> <li>Edit Groups of Screens: I want to edit groups of screens so that I can update the organization of presentations.</li> </ul>"},{"location":"pi/#as-a-designer","title":"As a designer:","text":"<ul> <li>Create Templates: I want to create templates so that I can define the structure and content of presentations.</li> <li>Choose Widgets: I want to choose widgets for the template so that I can add interactive elements to presentations.</li> </ul>"},{"location":"pi/#as-a-viewer","title":"As a viewer:","text":"<ul> <li>View Screens: I want to see screens so that I can stay updated with the latest content.</li> <li>View Scheduled Content: I want to view content scheduled for specific times or dates so that I know what information is available when.</li> </ul>"},{"location":"pi/#templates_1","title":"Templates","text":"<ul> <li>Content Management System / Content Creator Tool</li> <li>Documentation Website</li> </ul>"},{"location":"pi/#checkpoint-1","title":"Checkpoint 1","text":"<ul> <li>Checkpoint 1 Presentation</li> </ul>"},{"location":"pi/#prototype-phase","title":"Prototype Phase","text":"<ul> <li>M3: Prototype Phase Presentation</li> </ul>"},{"location":"pi/#checkpoint-2","title":"Checkpoint 2","text":"<ul> <li>Checkpoint 2 Presentation</li> </ul>"},{"location":"pi/#checkpoint-3","title":"Checkpoint 3","text":"<ul> <li>Checkpoint 3 Presentation</li> </ul>"},{"location":"pi/#last-phase","title":"Last Phase","text":"<ul> <li>M4: Project Presentation</li> <li>Commercial video</li> <li>Demo video</li> <li>Poster</li> <li>Technical Report</li> </ul>"},{"location":"sprints/","title":"Sprints","text":"<p>To organize what needed doing and alike, sprints were created, along with weekly (friday) meetings with the tutors and a weekly (tuesday) meeting with the group to decide together what needed doing and what each one of us would end up doing. Every monday a sprint report would be created and delivered to the tutors to keep them up to date.</p> <p>Structure:</p> <ul> <li>Summary : TODO list;</li> <li>Detailed version : what was done but in detail (might not include everything);</li> <li>Sprint result : report if something was missed.</li> </ul> <p>This was supervised/organized mostly by the team manager, however, there were 2 weeks where the team manager put himself on standby so that the team could learn some organizing skills without his help, aiming and providing a way for them to feel the responsability of said position.</p>"},{"location":"sprints/#01032024-08032024","title":"01/03/2024 - 08/03/2024","text":"<p>Summary</p> <pre><code>- Create github organization (and add tutors to it)\n- Add tutors to discord and create respective channels\n- Start working on documentation\n- Research about different real life examples (in practice)\n- Organize group into sub-groups\n- Document with link to the website\n- Create and propose architecture \n- Requirements gathering, both functional and non-functional and personas with scenarios.\n- Create calendar\n- Figma\n- MP mockup\n</code></pre> <p>Detailed version</p> <p><code>As this was the first week, we did not think about providing a detailed report.</code></p> <p>Sprint results</p> <p><code>All items were completed within time.</code></p>"},{"location":"sprints/#09032024-19032024","title":"09/03/2024 - 19/03/2024","text":"<p>Summary <pre><code>Frontend\n- Create CMS in figma\n- Initialize React's basic code\n- Docker configuration\n- Initialize documentation page\n\nBackend\n- Basic endpoints initialization\n- Database entities\n- Docker configuration\n\nMedia Player\n- Flask request API\n- Mock up of widget converter / setting up format for widgets and templates\n\nExtra\n- Create dedicated repos and backlogs\n- M2 Presentation\n- Domain Model\n- User Stories\n</code></pre> Detailed version</p> <pre><code>Frontend\n\n- Create CMS in figma (before client's feedback)\n    - Create all pages related to it \n- Finish figma CMS UI (after client's feedback)\n    - Added buttons for visibility in some areas (client's request)\n    - Created scheduler page\n    - Created pending monitors pop up\n- Initialize frontend code\n    - Started Component side bar\n    - Started Component page title\n- Initialize React's basic code\n- Docker configuration\n    - Created docker for react and docker-compose for the entire application (skeleton only)\n\nBackend\n\n- Docker configuration\n    - Created docker and docker-compose for spring boot\n    - Created docker for databases (currently missing env file to change password and db name)\n- Created Spring models\n    - File and content in progress\n    - Currently missing user model\n- Created basic Endpoints functionality\n- Created some Tests\n    - Screen and monitor group are done\n    - Template in progress\n\nMedia Player\n\n- Basic Implementation of MQTT client\n- Started Logging\n- Proof of Concept of Playing Multiple Videos (playlist)\n- Mockup of HTML Generator from Template\n\nExtra\n\n- Tweak architecture\n    - Removed unnecessary database (mongoDB)\n    - Small tweaks have been done to match our needs\n- User flow diagram\n    - Created flow diagrams for both users (Admin and User)\n- Start report\n    - Report's initial skeleton is done\n- Create database model\n- Created user stories\n- Initialize documentation page\n    - Customized landing page\n    - Create documentation page structure\n    - Added information to documentation\n    - Added basic guidelines\n    - Added information to PI tab\n- Created dedicated repositories and backlogs\n- Created M2 Presentation\n</code></pre> <p>Sprint results</p> <p><code>All items were completed within time.</code></p>"},{"location":"sprints/#20032024-26032024","title":"20/03/2024 - 26/03/2024","text":"<p>Summary</p> <pre><code>Frontend\n- Create side bar component\n- Create header component\n- Create group menu component\n- Create static monitors page\n- Create static specific monitor page\n- Create static media page\n\nBackend\n- Research and start working on broker\n- Fix docker compose\n- Data initialization (mock)\n- Endpoints\n    - Fix some errors\n    - Create missing tests\n\nMedia Player\n- Research about OS image and daemons\n- Research and start working on mosquitto (broker - alongside backend)\n- Started set up message protocol\n- Research about news API\n\nExtra\n- Add SonarQube to frontend\n- Add SonarQube to backend\n- Continue documentation\n- Ask for videos\n</code></pre> <p>Detailed version <pre><code>Frontend\n- User Interface\n    - Created static media page\n    - Created static dashboard page\n    - Created static monitors page\n    - Created static specific monitor page\n    - Created various components\n- Testing\n    - Added local Sonarqube to verify frontend code smells and alike\n\nBackend\n- Integrated MQTT (server-docker connection)\n- Inserted dummy data for testing (files, monitors and monitors groups)\n- Created endpoints to upload files and folders\n- Minor adjustments to models\n- Testing\n    - Created unit tests for services/repositories\n    - Created integration tests for controllers\n\nMedia Player\n- Research and Implementation of news API\n- Figuring out how to create OS image\n- Improved implementation of MQTT client\n- Started implementation of message protocol\n\nExtra\n- Tweak architecture\n    - Added influxDB for logging and monitor status\n- Tweaked database model\n- Updated documentation\n</code></pre></p> <p>Sprint results</p> <p><code>All items were completed within time.</code></p>"},{"location":"sprints/#27032024-02042024","title":"27/03/2024 - 02/04/2024","text":"<p><code>- No sprint was set for this week due to holidays and other subject works.</code></p>"},{"location":"sprints/#03042024-09042024","title":"03/04/2024 - 09/04/2024","text":"<pre><code>Frontend\n- Make pages dynamic\n- Design login\n- Research Calendar\n- Implement login (?)\n- Start working on calendar (?)\n\nBackend\n- Work on influxDB\n- Add swagger\n- Add github actions (automatic tests)\n- Implement basic log in\n- Fix code logic and structure\n\nMedia Player\n- Backend integration\n- Continue Message Protocol\n- Work on automatic setup\n- Mock schedule\n\nExtra\n- Implement sonarcloud for organization (frontend, backend and MP)\n- Configure docker compose onto a single main one.\n- Decide logs Time To Live (TTL)\n\nMonday (08/04/2024)\n- Refactor code\n- Work on documentation\n- Work on report\n</code></pre> <p>Detailed version <pre><code>Frontend\n- Changed tables in Media, Monitors and Pending Monitors page's to Data Tables\n- Started on Media, Monitors and Pending Monitors dynamic information load\n\nBackend\n- Started IDP integration (research + tests)\n- Added swagger to document endpoints\n- Handling of MQTT messages\n- Fix some problems related to branch merges\n\nMedia Player\n- Message Protocol has been defined. Media Player now follows the protocol.\n- We were able to establish connection between the media player and the broker inside the same network but different machines.\n- Created some tests to allows us to test the register and template parts of the protocol\n\nExtra\n- Added and configured Media Player Sonarcloud analysis\n- Documentation\n - Added information to Backend\n - Added information to Media Player\n - Added information to PI tab\n- Report\n - Added some parts to it\n</code></pre></p> <p>Sprint results <pre><code>## Missed from sprint ##\nFrontend\n- Did not fully implement dynamic information loading\n- Design login\n- Research calendar\n- (Not fully decided for this sprint but mentioned)\n - implement login \n - start working on calendar\n\nBackend\n- Work on influxDB\n- Add github actions workflow (automatic tests)\n- Implement basic log in (substituted with IDP research and tests)\n- Fix code logic and structure (some was done but not everything)\n\nMedia Player\n- Make the media player run when the raspberry pi is booted (will be done tomorrow)\n\nExtra\n- Decide logs TTL and structure\n- Go over database diagram (will be done tomorrow)\n- Go over endpoints and come to a final decision (will be done tomorrow)\n- Configure docker compose onto a single file for frontend + backend\n- Missing sonarcloud configuration for backend + frontend\n- Missing frontend documentation\n</code></pre></p>"},{"location":"sprints/#10042024-16042024","title":"10/04/2024 - 16/04/2024","text":"<pre><code>- No sprint was set for this week besides working for M3 presentation.\n</code></pre> <p>Detailed version <pre><code>N/A\n</code></pre></p> <p>Sprint results <pre><code>N/A\n</code></pre></p>"},{"location":"sprints/#17042024-23042024","title":"17/04/2024 - 23/04/2024","text":"<pre><code>Frontend\n- Make some adjustments to monitors page\n- Make some adjustments to media page\n- Start working on making dashboard dynamic\n- Adding new small UI features to scheduler\n- Research/implement calendar (?)\n\nBackend\n- Work on influxDB and logs\n- Work on UA IDP\n- Make some adjustments to Media\n- Work on some endpoints/services for dashboard and scheduler\n\nMedia Player\n- Configure automatic setup on Raspberry PI 5\n- Work on fetching media files for templates\n\nExtra\n- Decide one-sentence project description\n- Elaborate guidelines further\n\nMonday (22/04/2024)\n- Refactor code\n- Work on technical debt\n- Work on documentation\n- Work on report\n</code></pre> <p>Detailed version <pre><code>Frontend\n- Scheduling menus done(wireframe has been developed which enables users to choose content and set both start and end dates and times) but needs some improvements\n- Editing and adding new groups done\n- Added breadcrums to the media page\n\nBackend\n- Integration tests for monitors and files\n- Some tweaks on overall logic for monitorsGroup and tests added\n- Final details on schedule entity and respective tests\n- InfluxDB working (backend logs added)\n- Some tweaks on monitors delete logic\n- Some tweaks on overall logic for files and respective tests\n- Ua idp working and normal user working\n\nMedia Player\n- Start with some tests for the implementation of the initial configuration\n- Refactor some endpoints to fit with changes in the widgets\n- Implemented basic way to download the files sent for the templates\n\nExtra\n- Documentation\n- Added information to PI tab\n</code></pre></p> <p>Sprint results <pre><code>Everything seems to have been met.\n</code></pre></p>"},{"location":"sprints/#24042024-30042024","title":"24/04/2024 - 30/04/2024","text":"<pre><code>Frontend\n- Implement delete group functionality\n- Mock very basic CCT functionality\n- Fix update group bug\n- Fix schedule rule to send correct information\n\nBackend\n- Rework some file service functionalities\n- Create more tests overall\n- Finish implementing UA IDP login\n- Work on sending file download URL to Monitors\n\nMedia Player\n- Work on more MP configuration\n\nExtra\n- N/A\n\nMonday (29/04/2024)\n- N/A. Mostly used to finish what's missing from the sprint.\n</code></pre> <p>Detailed version <pre><code>Frontend\n- Implemented delete group functionality\n- Added resizable divs to CCT\n- Fixed bug within update group functionality\n- Fixed schedule rule content POST/PUT information\n- Finished schedule rule modals\n\nBackend\n- Reworked some file service functionalities\n- Created more tests\n- Unit tests for content, template, widget, templateGroup and templateWidget\n- Integration tests with 2 containers for files and monitor\n- Finished implementing UA IDP login\n- Added functionality to send files download URL to monitors\n\nMedia Player\n- Worked on more MP configuration\n\nExtra\n- Minor update in report\n</code></pre></p> <p>Sprint results <pre><code>Everything seems to have been met.\n</code></pre></p>"},{"location":"sprints/#31042024-07052024","title":"31/04/2024 - 07/05/2024","text":"<p>For the upcoming 3 weeks (including this one) it was the group's responsability to create and deliver sprints.</p> <pre><code>Frontend\n- Fix scheduler page UI bugs\n- Add some verifications to scheduler page\n- Fix small bugs in Media page\n- Research graphs for dashboard page\n- Design CCT\n- Work some more on the CCT mock up\n- Improve some UI aspect\n\nBackend\n- Create last unit tests\n- Add more integration tests\n- Analyse schedule structure and fix it if needed\n\nMedia Player\n- Complete the work on fetching media files for templates\n- Try to finish configuration\n\nExtra\n- Review pending PRs and issues\n- Create checkpoint 2 presentation\n\nMonday (06/05/2024)\n- Refactor code\n- Work on technical debt\n- Work on documentation\n- Work on report\n</code></pre> <p>Detailed version <pre><code>Frontend\n- CCT\n- Created page that allows us to view all existing templates\n- The page already uses the information from the backend, missing the create template functionality\n- The template editor page already allows for moving the divs around and resizing them\n\nOther\n- Fixed some problems with the animations\n- Graphics framework has been chosen\n- Added validations with explanations to the Scheduler ui\n- General ui fixes\n\nBackend\n- Sending the files' download links to the MediaPlayer\n- Updated schedule and templateGroup entities and their logic\n- Unit tests for templateGroup, templateWidget , monitorGroup\n\nMedia Player\n- Downloading the files from the backend is done\n- Continued to work on the configuration\n\nDeployment\n- Initial attempts at deployment using nginx and a production docker-compose\n- We were able to host the backend in the server that we were given and then through a public broker communicate in different networks (in different houses)\n</code></pre></p> <p>Sprint results <pre><code>No documentation was found related to this.\n</code></pre></p>"},{"location":"sprints/#08052024-14052024","title":"08/05/2024 - 14/05/2024","text":"<pre><code>Frontend\n- Continue CCT Development\n- Add option to remove files\n- Add option to remove templates\n- Add 'select group' verification in the schedule\n- CRUD rules for schedule\n- Start adding visual calendar\n\nBackend\n- Finish Integration tests\n- Add logs for the monitors and finish adding remaining backend logs\n- Change the way templateGroup is being sent\n- Add some missing logic when adding a monitor and getting the respective templateGroups\n\nExtras\n- Refactoring code and removing unused endpoints\n\nMedia Player\n- Start implementation of the schedule\n- Send logs to backend\n- Attempt to finish configuration\n</code></pre> <p>Detailed version <pre><code>No documentation was found related to this.\n</code></pre></p> <p>Sprint results <pre><code>No documentation was found related to this.\n</code></pre></p>"},{"location":"sprints/#15052024-21052024","title":"15/05/2024 - 21/05/2024","text":"<p>No sprint was done for this week, however, by the end of the week, as the ending date was getting closer, Pedro decided to get back to team managing and created the following, even if simple, sprint based on the detailed version provided by them.</p> <pre><code>Extras\n- Plan and organize what needs to be removed from our \"to implement\" features;\n- Decide current sprint priorities for features;\n- Work on said features, bugs and alike;\n- Deploy app and test it;\n- Continue working on the report;\n- Plan commercial video's sketch, transcript and date to film\n</code></pre> <p>Detailed version</p> <p>The sprint report (done by the team without Pedro's supervision) simply addresses the following <pre><code>Checkpoint 20/05/2024\n- Maioria das funcionalidades planeadas funcionais\n- Imagem de Linux do Media Player funcional\n- Deployment do backend + mosquitto na porta 80\n- MediaPlayer consegue se reconectar depois de restarts/falha de internet\n</code></pre></p> <p>Sprint results <pre><code>Not finished\n- Minor frontend visual bugs\n- Send rules to monitor when be reconnects\n- Login/roles\n- Visual aspect (widgets)\n</code></pre></p>"},{"location":"sprints/#22052024-28052024","title":"22/05/2024 - 28/05/2024","text":"<p>This was the last sprint ever created for the subject TQS took too much time from us and we aimed to have everything done this week in terms of PI (i.e. the product should be released and/or should be ready for deployment within DETI's televisions).</p> <p>To guarantee that we would meet the deadlines for delivery, Pedro decided to divide the group into sub-groups to tackle each task more efficiently.</p> <ul> <li>Video editing was done by Tomas &amp; Pedro (production involved everyone);</li> <li>Demo was done by Joao and Tomas;</li> <li>Poster was done by Rafael, Diogo &amp; Miguel.</li> </ul> <pre><code>Frontend\n- Check if delete is working correctly;\n- Create issues on github;\n- Document frontend and add some comments when needed;\n- Work on Technical Debt.\n\nBackend\n- Fix update error;\n- Change some tests;\n- Document backend and add some comments when needed;\n- Work on Technical Debt.\n\nMedia Player\n- Fix problems found in the last week;\n- Make a proper linux image;\n- Try to make widgets more consistent (sizes, fonts, etc);\n- If there is time, work on extra features (static ip, screensaver, extra widgets);\n- Work on Technical Debt;\n- Document MP and add some comments when needed.\n\nExtras\n- Continue working on the report;\n- Work on the documentation and PI tab on the docs website;\n- Record scenes for commercial video;\n- Edit video;\n- Create DEMO video for our application;\n- Create poster for PI;\n- Contact STIC?;\n- Ask students to test/play around with our application to get some feedback;\n- Arrange things with Daniel?;\n- Register our group for students DETI (submit PI's form)\n\nDeadlines (not final, just to deliver to tutors)\nVideo - 26/05/2024 **by 5pm**\nPoster - 26/05/2024 **by 5pm**\nDemo - 27/05/2024 **by 10am**\n</code></pre> <p>Detailed version <pre><code>Frontend\n- N/A.\n\nBackend\n- Changed some tests;\n- Small fixes.\n\nMedia Player\n- Fix most of the problems from last week;\n- Created a proper linux image;\n- Made widgets more consistent across resolutions;\n- Created screensaver;\n- Created events widget;\n- Finished documentation for mp setup and config.\n\nExtra\n- Added more information to the report across all fields;\n- Checked if things worked correctly, but we're waiting for our final merge;\n- Added information to the documentation and removed unnecessary parts;\n- Made documentation navigation prettier and easier to interact with;\n- Recorded all scenes for the video, edited it and is now waiting for the final approval;\n- Created DEMO, edited it and is now waiting for the final approval;\n- Created poster and is now waiting for the final approval;\n</code></pre></p> <p>Sprint results <pre><code>Missed\n- Work on Technical Debt;\n- Create most issues on github;\n- Document frontend and add some comments where needed;\n- Document backend and add some comments where needed;\n- Fix one Media Player problem from last week;\n- Create static IP (this was an extra, so it won't be worked upon);\n- Work on PI tab documentation;\n- Merge all branches into dev.\n</code></pre></p> <p>This is the end of sprint creation and report.</p> <p>Team manager personal message:</p> <p>Overall I feel that the team did mostly a good job at meeting deadlines. When it comes to organization the team lacked a bit and I wasn't capable of providing what was needed due to lack of experience in team leading. Even then, I feel that this was a positive experience where I learned a lot and the team has as well.</p>"},{"location":"documentation/architecture/","title":"Architecture","text":""},{"location":"documentation/creating-templates/","title":"Creating Templates","text":""},{"location":"documentation/creating-templates/#template-format","title":"Template format","text":"<p>A template is a skeleton that consists of multiple widgets associated to it which govern what is displayed in each group and what contents are shown; A template can be used by multiple groups at once. </p>"},{"location":"documentation/creating-widgets/","title":"Creating Widgets","text":""},{"location":"documentation/creating-widgets/#widget-format","title":"Widget Format","text":"<p>The widgets are HTML snippets that are put together to create what is show on the monitors. These widgets can have different variables inside them that have the format <code>[[VariableName]]</code>. By default, the system fills in the default variables <code>Top</code>, <code>Left</code>, <code>Width</code>, <code>Height</code> and <code>widgetID</code> meaning that all widgets can use this variables. For example, if our widget looks like this:</p> <pre><code>&lt;div style=\"top: [[top]]px; left: [[left]]px; width: [[width]]px; height: [[height]]px;\"&gt;\n    &lt;p&gt;Hello [[widgetID]]&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>in the end result, considering some random values, when the HTML is generated it will look like this</p> <pre><code>&lt;div style=\"top: 1234px; left: 4321px; width: 200x; height: 200px;\"&gt;\n    &lt;p&gt;Hello 4e8a9f772d734b48bfb52d23def15429&lt;/p&gt;\n&lt;/div&gt;\n</code></pre> <p>For consistency, all widgets end with the <code>.widget</code> extension.</p>"},{"location":"documentation/creating-widgets/#widget-location","title":"Widget Location","text":"<p>By default, all widgets are located at <code>resources/static/widgets/</code>.</p>"},{"location":"documentation/creating-widgets/#widgetid","title":"widgetID","text":"<p>Apart from the position and size variables, each widget can also have a <code>widgetID</code> variable. This variable is a 32 character long string containing numbers and letters (it's an uuid without the <code>-</code>s). It is specially usefull in situations where you need an id that is different between two of the same widget in the same template. For example, in our media template this is used so that our javascript functions know what divs to target when there is more than 1 media widget on a template:</p> <pre><code>&lt;div style=\"top: [[top]]px; left: [[left]]px; width: [[width]]px; height: [[height]]px;\"&gt;\n    &lt;video autoplay muted class=\"stretch\" id=\"video[[widgetID]]\"&gt;&lt;/video&gt;\n    &lt;img class=\"stretch\" style=\"display: none;\" id=\"image[[widgetID]]\"&gt;\n&lt;/div&gt;\n</code></pre>"},{"location":"documentation/creating-widgets/#adding-variables-aka-content","title":"Adding Variables (aka Content)","text":"<pre><code>Image Widget Example\n\n&lt;div style=\"top: [[top]]px; left: [[left]]px; width: [[width]]px; height: [[height]]px;\"&gt;\n    &lt;img src=\"[[image]]\" class=\"stretch\"&gt;\n&lt;/div&gt;\n</code></pre> <p>If we want our widget to have extra widgets (currently only one per widget) we have to give it what we call extra <code>Contents</code>. These contents have a <code>name</code>, a <code>type</code> and an optional list of <code>options</code>. The name is what will be replaced in the widget, in the example above it would be <code>image</code>. For the types there are currently 2 supported: <code>media</code> and <code>options</code></p> <ul> <li> <p>The <code>media</code> type will allow the user to choose a file or a folder. If a file is chosen the variable will be replaced with the file name, if a folder is chosen it will be replace with <code>file1.mp4\",\"file2.png</code> (see here)</p> </li> <li> <p>The <code>options</code> type will give the user the option to choose between what is inside the <code>options</code> list. This is used, for example, in our temperature widget, where we set the list of options as a list of weather stations for the user to choose from.</p> </li> </ul> <pre><code>&lt;div hx-get=\"http://localhost:5000/ipma/temperature?station=[[station]]\" ...&lt;/div&gt;\n</code></pre>"},{"location":"documentation/creating-widgets/#using-external-apis","title":"Using External APIs","text":"<p>As we can see in the example above, our temperature widget is fetching information about the temperature. This information is being fetched from the flask instance running in the Media Player. To obtain this information we use htmx in our widget to make a get request to the desired endpoint. If we want to fetch other information from the internet we must first create the endpoint in flask that fetches and parses that information. Another example of a widget that does this is our events widget:</p> <pre><code>&lt;div style=\"background-color: white; position: absolute; top: [[top]]px; left: [[left]]px; width: [[width]]px; height: [[height]]px; display: flex; flex-direction: column; align-items: center; justify-content: center;\"&gt;\n    &lt;div id=\"[[widgetID]]-1\" style=\"position: static; text-align: center; margin-bottom: 5vw; width: 95%; color: #000;\" hx-get=\"http://127.0.0.1:5000/ua/events\" hx-trigger=\"load, every 30m\"&gt;\n    &lt;/div&gt;\n    &lt;div id=\"[[widgetID]]-2\" style=\"position: static; text-align: center; width: 95%; color: #000;\" hx-get=\"http://127.0.0.1:5000/ua/events\" hx-trigger=\"load, every 30m\"&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre> <p>where the endpoint looks something like this:</p> <pre><code>@app.route(\"/ua/events\")\ndef ua_events():\n    url = \"...\"\n\n    # Make Request to the URL\n    response = requests.get(url).content\n\n    # Parse the Information\n    title = event[\"title\"]\n\n    start_datetime = datetime.strptime(event[\"start_utc_datetime\"], \"%Y-%m-%d %H:%M:%S\")\n    start_date =start_datetime.strftime(\"%d-%m-%Y\")\n    end_datetime = datetime.strptime(event[\"end_utc_datetime\"], \"%Y-%m-%d %H:%M:%S\")\n    end_date =end_datetime.strftime(\"%d-%m-%Y\")\n\n    # Return the Information\n    return f'''\n    &lt;p style=\"font-size: 1.5vw; margin: 0; \"&gt;{date}&lt;/p&gt;\n    &lt;p style=\"font-size: 1.1vw; margin: 0.1vw 0;\"&gt;{location}&lt;/p&gt;\n    &lt;p style=\"font-size: 1.7vw; font-weight: 600; margin-top: 0.5vw;\"&gt;{title}&lt;/p&gt;\n    '''\n</code></pre>"},{"location":"documentation/creating-widgets/#font-scaling","title":"Font Scaling","text":"<p>The HTML is generated based on the resolution on the monitor, this means that the widgets should not use absolute pixel values for sizes and fonts.</p>"},{"location":"documentation/creating-widgets/#adding-a-widget","title":"Adding a Widget","text":"<p>There is currently no easy way to add a widget to the database. There is an open issue regarding this. Currently, if we want to add a widget to the database we must add it to the <code>DataLoader.java</code> file located at <code>src/main/java/deti/uas/uasmartsignage/initializer/</code> inside the <code>loadTemplates</code> function. An example of how to do it would be:</p> <pre><code>Widget mediaWidget = new Widget();\nmediaWidget.setName(\"Media\");\nmediaWidget.setPath(\"static/widgets/media.widget\");\nwidgetRepository.save(mediaWidget);\nContent mediaWidgetContent = new Content();\nmediaWidgetContent.setName(\"videos\");\nmediaWidgetContent.setType(\"media\");\nmediaWidgetContent.setWidget(mediaWidget);\ncontentRepository.save(mediaWidgetContent);\n</code></pre>"},{"location":"documentation/creating-widgets/#current-limitations","title":"Current Limitations","text":""},{"location":"documentation/creating-widgets/#only-one-content-per-widget","title":"Only One Content per Widget","text":"<p>The way the frontend currently works only one <code>Content</code> can be assigned to each widget.</p>"},{"location":"documentation/creating-widgets/#non-scalable-media-content-type","title":"Non Scalable Media Content Type","text":"<p>Due to how our media widget uses the media content's values, when the user chooses a folder the value of the variable is replaced with <code>file1.mp4\",\"file2.png</code> while <code>file1.mp4,file2.png</code> would make more sense in general but wouldn't work with the current version of our media widget.</p> <pre><code>var videoList[[widgetID]] = [\"[[videos]]\"];\n</code></pre>"},{"location":"documentation/frontend-backend-config/","title":"Backend & Frontend Configuration","text":"<p>The configuration of all information in configuration files, environments or properties must be applied before running the code.</p>"},{"location":"documentation/frontend-backend-config/#frontend","title":"Frontend","text":""},{"location":"documentation/frontend-backend-config/#backend","title":"Backend","text":""},{"location":"documentation/introduction/","title":"About the Project","text":"<p>UA Smart Signage is an open-source digital signage solution offering highly customizable templates and advanced content scheduling features. It also includes incremental enhancements for a more dynamic user experience, along with log monitoring for administrators to ensure smooth operation.</p> <p>With its user-friendly interface, UA Smart Signage provides a seamless experience for both tech-savvy users and those with limited technical skills, ensuring a robust and accessible user experience for everyone.</p>"},{"location":"documentation/key-concepts/","title":"Key Concepts","text":"<p>To understand the different parts of our system, we first need to split it into smaller parts.</p>"},{"location":"documentation/key-concepts/#sign-in-and-dashboard","title":"Sign in and Dashboard","text":""},{"location":"documentation/key-concepts/#security","title":"Security","text":"<p>When first interacting with the website, you must sign in to access all the functionalities available to your role.  </p> <p>To do this you have two options: </p> <ul> <li>Sign in as an administrator </li> <li>Or authenticate through UA's Identity Provider (IDP) system*</li> </ul> <p>This helps manage user permissions whilst making sure that it is done in a secure way. *Your IDP must be in the accepted user list.</p> <p>To learn more visit the sign in section.</p>"},{"location":"documentation/key-concepts/#monitoring-information","title":"Monitoring information","text":"<p>To assist in debugging \u2014 whether caused by user actions or a monitor's malfunction \u2014 we rely on detailed logs. These logs contain information about the action, the username and its cause to provide further insights. </p> <p>These logs help identify malicious activity, errors or even hardware-anomalies. </p> <p>To learn more visit the dashboard section.</p>"},{"location":"documentation/key-concepts/#media","title":"Media","text":""},{"location":"documentation/key-concepts/#folders-and-files","title":"Folders and Files","text":"<p>When selecting content to display on a monitor, you will need to upload the media first. This is done through Media, a virtual file system designed to manage media uploads, offering easy access and organization. </p> <p>To learn more visit the media section.</p>"},{"location":"documentation/key-concepts/#monitors","title":"Monitors","text":""},{"location":"documentation/key-concepts/#pending-and-list","title":"Pending and list","text":"<p>To display content on a monitor, the monitor must first be added to the system's monitor list. This process involves setting up the mini-computer, follow its instructions and then accepting the monitor via the frontend.</p> <p>To learn more visit the monitors section.</p>"},{"location":"documentation/key-concepts/#content-creator-tool-cct","title":"Content Creator Tool (CCT)","text":"<p>This is one of the few admin specific role functionalities which is not available to anyone else.</p>"},{"location":"documentation/key-concepts/#templates","title":"Templates","text":"<p>To display content in a monitor, you must first create a template with widgets to later populate with content. These templates have CRUD functionalities.</p> <p>To learn more visit the CCT section.</p>"},{"location":"documentation/key-concepts/#schedule","title":"Schedule","text":""},{"location":"documentation/key-concepts/#groups-and-rules","title":"Groups and Rules","text":"<p>To create a <code>Rule</code> which dictates when, how and what to show in your monitors, you must first select a group.</p> <p>Finally, when a user chooses what content to be displayed on the monitor, first they must choose one of the <code>Templates</code> available, then select <code>Content</code> from Media to populate the <code>Widgets</code> as well as the time, day and date.</p> <p></p> <p>Behind the scenes, all these elements are combined into an HTML file, which the Media Player then displays.</p>"},{"location":"documentation/key-concepts/#explanation","title":"Explanation","text":"<p>Group</p> <p>Each monitor comes with its own default group, however to display contents it must belong to a user-created group. These groups allow the user to <code>group</code> different monitors and choose what is being displayed in them at the same time.</p> <p>To learn more visit the group section.</p> <p>Widget</p> <p>To make our system customizable, the content displayed on the screen is divided into <code>Widgets</code>. These are HTML snippets that are able to receive variables to adjust their appearance. When a widget is placed in a template multiple values are added to it, for example, positional variables such as <code>Top</code>, <code>Left</code>, <code>Width</code> and <code>Height</code> are assigned. These variables allow easy and precise control over the exact size and position of the widget inside the template. Additional variables can be added through the use of contents.</p> <p>To learn more visit the widgets section.</p> <p>Template</p> <p>A template is simply a collection of widgets. The HTML of a template is created by adding up the HTML of all it's widgets.</p> <p>To learn more visit the template section.</p> <p>Content</p> <p>Some widgets have variables inside them by default like <code>Width</code> and <code>Height</code> but some of them have some extra <code>contents</code>. For example, the <code>Media</code> and <code>Temperature</code> widgets shown in the gif above allow the user to choose extra information. These contents have a <code>Type</code>, like <code>Media</code> and <code>Options</code>, that are used decide what the user can choose for a certain widget.</p> <p>To learn more visit the contents section.</p> <p>Schedule</p> <p>The system allows the user to choose when a certain template is going to be displayed. A <code>Schedule</code> stores this information.</p> <p>To learn more visit the schedule section.</p> <p>Rule</p> <p>A Rule is a combination of multiple parts. It says what <code>Group</code> displays what <code>Template</code> at what <code>Schedule</code> with what <code>Content</code>.</p> <p>To learn more visit the rule section.</p>"},{"location":"documentation/media-player-config/","title":"Media Player Configuration","text":"<p>The configuration can be changed during the setup of the Media Player or it can be changed manually by editing the <code>config.ini</code> file.</p>"},{"location":"documentation/media-player-config/#mqtt","title":"MQTT","text":"<ul> <li><code>host</code> - broker ip address</li> <li><code>port</code> - broker port</li> <li><code>keepalive_mqtt</code> - mqtt client keepalive delay (causes problems if greater or equal to 60)</li> <li><code>username</code> - broker username (credentials)</li> <li><code>password</code> - broker password (credentials)</li> <li><code>name</code> - name that the monitor will appear as in the system</li> <li><code>register_topic</code> - topic used to send registration message</li> <li><code>transport</code> - mqtt transport method (options are 'tcp' or 'websockets')</li> <li><code>keepalive_logs_delay</code> - delay between keepalive log messages (see message protocol)</li> <li><code>keepalive_logs_topic</code> - topic to send the keepalive log messages</li> </ul>"},{"location":"documentation/media-player-config/#mediaplayer","title":"MediaPlayer","text":"<ul> <li><code>default_template</code> - template to be used when no rule is being displayed</li> <li><code>savings_mode</code> - attemt to blank screen when no rule is being displayed (please see here before using it)</li> </ul>"},{"location":"documentation/media-player-config/#logging","title":"Logging","text":"<ul> <li><code>log_file</code> - file to store the log messages</li> <li><code>log_level</code> - logging level (options are 'DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')</li> </ul>"},{"location":"documentation/media-player-config/#savings-mode","title":"Savings Mode","text":"<p>If this active, when no rules are being displayed, it calls <code>xset dpms force off</code> to blank the screen. This might not work on some screens and it also does not working if the screen blanking is turned off in the raspberry pi. More info here.</p>"},{"location":"documentation/message-protocol/","title":"Message Protocol","text":""},{"location":"documentation/message-protocol/#messages-sent-by-the-media-player","title":"Messages Sent by the Media Player","text":"<pre><code>Register Message (sent once to register the monitor)\n\ntopic: \"register\"\npayload: \n{\n    \"method\":\"REGISTER\",\n    \"name\":\"\",   // name defined when configuring the monitor\n    \"width\":\"\",  // screen width\n    \"height\":\"\", // screen height\n    \"uuid\":\"\"    // unique identifier of the monitor\n}\n</code></pre> <pre><code>Keep-Alive Message (sent periodically to tell the backend it's still alive)\n\ntopic: \"keepalive\"\npayload: \n{\n    \"method\":\"KEEP_ALIVE\",\n    \"uuid\":\"\"  // unique identifier of the monitor\n}\n</code></pre>"},{"location":"documentation/message-protocol/#messages-sent-by-the-backend","title":"Messages Sent by the Backend","text":"<p><pre><code>Confirm Register Message (sent as a response to the register message)\n\ntopic: uuid // sent in a topic with the monitor's uuid\npayload: \n{\n    \"method\":\"CONFIRM_REGISTER\"\n}\n</code></pre> <pre><code>Rules Message (sent when the rules applied to a group are changed)\n\ntopic: \"uuid\" // uuid of the monitor we want so send the message to\n{\n  \"method\": \"RULES\",\n  \"rules\": [  // list with all the rules applied to the group\n    {\n      \"html\": \"\",        // html of the template to be displayed\n      \"files\": [],       // list with download links to all the media\n      \"schedule\": {      \n        \"startTime\": \"\", // time of the day to start. formated as \"12:00\"\n        \"endTime\": \"\",   // time of the day to end. formated as \"12:00\"\n        \"weekdays\": [],  // days of the week to display the rule 0-Monday 6-Sunday\n        \"startDate\": \"\", // rule applies from this date on out. formatted as \"2024-05-11\"\n        \"endDate\": \"\",   // rule applies up to this date. formatted as \"2024-05-11\"\n        \"priority\": 0    // used to decide what template plays when overlap happens. smaller number means higher priority.\n      }\n    }\n  ]\n}\n</code></pre></p>"},{"location":"documentation/setting-up-development/","title":"Setting Up (Development)","text":""},{"location":"documentation/setting-up-development/#requirements","title":"Requirements","text":"<ul> <li>Git</li> <li>Docker and Docker Compose</li> <li>python3 and pip</li> <li>NetworkManager (see here)</li> </ul>"},{"location":"documentation/setting-up-development/#frontend-backend","title":"Frontend &amp; Backend","text":"<ol> <li> <p>Clone the Repository     <pre><code>git clone https://github.com/UA-Smart-Signage-Platform/Content-Manager-System-and-Content-Creator-Tool &amp;&amp; cd Content-Manager-System-and-Content-Creator-Tool\n</code></pre></p> </li> <li> <p>(Optional) Change variables in <code>dev.env</code></p> </li> <li> <p>Run the development docker-compose     <pre><code>docker-compose -f docker-compose.yaml up --build\n</code></pre></p> </li> <li> <p>You can visit the website at <code>http://localhost:3000</code> the default login is <code>admin</code> <code>admin</code></p> </li> </ol>"},{"location":"documentation/setting-up-development/#media-player","title":"Media Player","text":"<ol> <li> <p>Clone the Repository     <pre><code>git clone https://github.com/UA-Smart-Signage-Platform/Media-Player &amp;&amp; cd Media-Player\n</code></pre></p> </li> <li> <p>(Optional, Recommended) Create the config manually and generate the uuid file (this prevents the program from going into the user configuration which turns off your wifi to create an Hotspot). There is an open issue to implemente this as a feature.     <pre><code>cp default_config.ini config.ini &amp;&amp; uuidgen &gt; uuid\n</code></pre></p> </li> <li> <p>(Optional) Edit the values inside <code>config.ini</code>, for more information visit the config page</p> </li> <li> <p>Follow the instructions in the README (Debian and Debian-based only) or use this one-liner.     <pre><code>sudo apt install libgirepository1.0-dev gcc libcairo2-dev pkg-config python3-dev gir1.2-gtk-4.0 python3-gi python3-gi-cairo gir1.2-gtk-3.0 gir1.2-webkit2-4.1 &amp;&amp; python3 -m venv venv &amp;&amp; source venv/bin/activate &amp;&amp; pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Run the Media Player     <pre><code>python3 media_player.py\n</code></pre></p> </li> </ol>"},{"location":"documentation/setting-up-production/","title":"Setting Up (Production)","text":""},{"location":"documentation/setting-up-production/#requirements","title":"Requirements","text":"<ul> <li>Git</li> <li>Docker and Docker Compose</li> <li>Mosquitto (the package is called mosquitto in apt)</li> </ul>"},{"location":"documentation/setting-up-production/#frontend-backend","title":"Frontend &amp; Backend","text":"<ol> <li> <p>Clone the Repository     <pre><code>git clone https://github.com/UA-Smart-Signage-Platform/Content-Manager-System-and-Content-Creator-Tool &amp;&amp; cd Content-Manager-System-and-Content-Creator-Tool\n</code></pre></p> </li> <li> <p>Generate the Mosquitto passwd file (replace with the username and password you wish to use)     <pre><code>mosquitto_passwd -b -c mosquitto/passwd BROKER_USERNAME_HERE BROKER_PASSWORD_HERE\n</code></pre></p> </li> <li> <p>(Optional) Change variables in <code>prod.env</code> and <code>docker-compose.prod.yaml</code></p> <ul> <li>Change <code>localhost</code> to the ip address you want to use</li> <li>If you generated the mosquitto passwd file replace the <code>MQTT_USERNAME</code> <code>MQTT_PASSWORD</code> values in <code>prod.env</code> accordingly</li> <li>Change other values as you see fit, for more information visit the enviroment variables page</li> </ul> </li> <li> <p>Run the production docker-compose     <pre><code>docker-compose -f docker-compose.prod.yaml up --build\n</code></pre></p> </li> <li> <p>You can visit the website at the ip you set at port 3000. The default login is <code>admin</code> <code>admin</code>.</p> </li> </ol>"},{"location":"documentation/setting-up-production/#media-player","title":"Media Player","text":"<ol> <li> <p>Grab the linux image and write it into your sd card using a tool like rpi-imager</p> </li> <li> <p>Boot into the OS and wait for the program to open.</p> </li> <li> <p>Follow the instructions on the screen and enter the Hotspot and visit the configuration page</p> </li> <li> <p>Connect to the internet and change the configuration values as you see fit (for more information visit the config page)</p> <ul> <li> <p>Ways to connect to the Internet:</p> <ul> <li>If you plug in an ethernet cable and your network dynamically assigns ip addresses just leave the wifi password input empty and you are good to go.</li> <li>If you want to use wifi choose one of the options available and input the password.</li> <li>If your network requires you to set an static ip, currently there is no way to do it with our program. For this you will need to plug in a mouse and keyboard or set it up by editing the filesystem on the sd card directly. There is an open feature request for this here.</li> </ul> </li> <li> <p>Important configuration values:</p> <ul> <li>Change the <code>host</code> to the ip you set in the configuration for the backend or a different one if you wish to use an external broker.</li> <li>Change the <code>port</code> to fit the correct port for the broker (80 is the default for our broker).</li> <li>Change the <code>username</code> and <code>password</code> to the correct credentials for the broker (see #2).</li> <li>Change the <code>transport</code> to <code>websockets</code> if you are using our default configuration in the backend.</li> <li>Change the <code>name</code> to the name you want the monitor to show up as in the system. </li> </ul> </li> </ul> </li> </ol>"},{"location":"documentation/setting-up-troubleshooting/","title":"Troubleshooting","text":""},{"location":"documentation/setting-up-troubleshooting/#visual-artifacts-in-media-player-window","title":"Visual Artifacts in Media Player Window","text":"<ul> <li>This seems to be a problem with the compositor and the command <code>export WEBKIT_DISABLE_COMPOSITING_MODE=1</code> seems to fix it.</li> </ul>"},{"location":"documentation/setting-up-troubleshooting/#media-player-takes-too-long-to-start","title":"Media Player Takes too Long to Start","text":"<ul> <li>This is a problem with GTK applications and can be fixed by uninstalling/stopping the xdg-desktop-portal</li> </ul>"},{"location":"documentation/setting-up-troubleshooting/#networkmanager-pop-up-upon-wrong-password","title":"NetworkManager pop-up Upon Wrong Password","text":"<ul> <li>During the user configuration, if a wrong password wifi password is inputted the program expects that the nmcli command will return and will open the Hotspot again. By default NetworkManager opens a pop-up upon receiving an incorrect password, which causes problems with our program. If you are using nm-applet you can deactivate this by running it with <code>--no-agent</code>. This is already fixed in the official linux image.</li> </ul>"},{"location":"documentation/setting-up-troubleshooting/#running-without-networkmanager","title":"Running without NetworkManager","text":"<ul> <li>If you want to run the program without the NetworkManager (if you are in WSL for example), firstly generate the config file manually as explained above and remove the <code>network_manager</code> import from <code>media_player.py</code> and remove all the places that it is used inside the file. This is possible since NetworkManager is only required for the user configuration part of the Media Player. (this works as of 26/05/2024)</li> </ul>"},{"location":"documentation/setting-up-troubleshooting/#cannot-find-module-frontend","title":"Cannot find module (Frontend)","text":"<ul> <li>This error happens when the system has not yet installed the requirements; <pre><code>Failed to compile\nError: Cannot find module [module]\n</code></pre> To fix this simply run: <pre><code>docker-compose up --build\n</code></pre></li> </ul>"},{"location":"documentation/tech-stack/","title":"Tech Stack","text":""},{"location":"documentation/tech-stack/#frontend","title":"Frontend","text":"Technology Purpose License React Javascript library for website and user interface building MIT Vite JavaScript build tool MIT Axios Javascript library for http requests MIT React Router Javascript framework for client side routing MIT Tailwind CSS framework for consistent styling MIT Framer Motion Animations and div manipulation MIT Zustand Easy library state management for React MIT TanStack Query Data-fetching library MIT pnpm Fast, disk space efficient package manager MIT <p>Designed for two users - the manager (admin) and the regular user (person who decides what to display). The frontend consists of 9 main technologies; It uses Vite with React which is served via an Nginx server, which also serves as a reverse proxy for the Spring Boot backend. For styling, Tailwind CSS is utilized in React, alongside with other libraries such as Zustand, Framer Motion, Axios, React Router, TanStack Query and pnpm.</p>"},{"location":"documentation/tech-stack/#react","title":"React","text":"<p>We opted for React due to its widespread usage and backing by a major company, Meta. This framework facilitates the creation and reuse of components across multiple pages within the application. Additionally, React provides a plethora of libraries that we can leverage if needed.</p>"},{"location":"documentation/tech-stack/#vite","title":"Vite","text":"<p>Vite is used to make developing a faster and better experience alongside the freedom of configurations compared to our initial approach of Create React Application (CRA). This allows it to be more optimized as well has fast reload and builds.</p>"},{"location":"documentation/tech-stack/#tailwind","title":"Tailwind","text":"<p>We've opted for the Tailwind CSS framework because, unlike other CSS frameworks such as Bootstrap, it provides enhanced control over HTML components without requiring direct manipulation of vanilla CSS. This streamlines the development process and offers better maintainability compared to traditional CSS approaches.</p>"},{"location":"documentation/tech-stack/#react-icons","title":"React Icons","text":"<p>React Icons is a React library that offers a diverse range of icons that we can utilize within our HTML content.</p>"},{"location":"documentation/tech-stack/#axios","title":"Axios","text":"<p>Axios is a straightforward, promise-based HTTP client that ensures enhanced consistency across various browsers. It operates at a higher abstraction level compared to fetch, resulting in more readable code. Axios also allows the creation of Request and Response Interceptors, which will be useful for adding authentication headers.</p>"},{"location":"documentation/tech-stack/#zustand","title":"Zustand","text":"<p>Zustand is a state manager with a hook-based API that allows for the management of local states within the application. Additionally, these states can be stored in the local storage.</p>"},{"location":"documentation/tech-stack/#react-router","title":"React Router","text":"<p>React Router enables client-side routing, providing a more responsive and speedy experience for users.</p>"},{"location":"documentation/tech-stack/#tanstack-query","title":"TanStack Query","text":"<p>TanStack Query, formerly known as React Query v3, is used to handle caching, updating data, manage memory and try to optimize the application as much as possible, removing redudant calls that would otherwise be needed. This helps keep both the code clean but also make it easy to manipulate and keep track of changes.</p>"},{"location":"documentation/tech-stack/#pnpm","title":"pnpm","text":"<p>pnpm is used to help avoid bugs with packages and by using hard linking and symbolic linking to a global on-disk content-addressable store we save space.</p>"},{"location":"documentation/tech-stack/#backend","title":"Backend","text":"Technology Purpose License Spring Boot microservice-based Java web framework Apache 2.0 Mosquitto lightweight message broker using MQTT EPL"},{"location":"documentation/tech-stack/#spring-boot","title":"Spring Boot","text":"<p>The backend will utilize Spring Boot for its effortless integration with various databases and robust security features. Furthermore, Spring Boot simplifies the testing process, ensuring reliable software quality.</p>"},{"location":"documentation/tech-stack/#mosquitto","title":"Mosquitto","text":"<p>In the backend we used mosquitto as a message broker, which allows us to comunicate with the media player.</p>"},{"location":"documentation/tech-stack/#databases","title":"Databases","text":"Technology Purpose License PostgreSQL object-relational database used for user, files and monitors information storage PostgreSQL InfluxDB time series database used for log storage and management MIT MongoDB NoSQL document database SSPL"},{"location":"documentation/tech-stack/#postgresql","title":"PostgreSQL","text":"<p>As the main database we used PostgreSQL, a relational database because our entities were very connected and also this database is very scalable.</p>"},{"location":"documentation/tech-stack/#influxdb","title":"InfluxDB","text":"<p>InfluxDB is used to keep logs from the monitors, Spring Boot, and the status of the monitor. We chose this database because it allows us to associate a timestamp with each entry, facilitating tracking and analysis of when events occurred. </p>"},{"location":"documentation/tech-stack/#mongodb","title":"MongoDB","text":"<p>Mongo is used to make our templates customizable and easy to manage by having Widgets, Rules and Templates being documents. </p>"},{"location":"documentation/tech-stack/#media-player","title":"Media Player","text":""},{"location":"documentation/tech-stack/#python","title":"python","text":"<p>The media player is fully implemented in python.</p>"},{"location":"documentation/tech-stack/#pywebview","title":"pywebview","text":"<p>Used to build the GUI for our program using JavaScript, HTML, and CSS.</p>"},{"location":"documentation/tech-stack/#paho-mqtt","title":"Paho MQTT","text":"<p>To communicate with the backend we utilize the Paho MQTT client for python.</p>"},{"location":"documentation/tech-stack/#rrule","title":"RRule","text":"<p>In the scheduler we utilize RRule to generate the start and end dates.</p>"},{"location":"documentation/tech-stack/#flask","title":"Flask","text":"<p>Used to fetch content from external apis and also used for the configuration page.</p>"},{"location":"documentation/tech-stack/#networkmanager","title":"NetworkManager","text":"<p>We use the nmcli utility to create hotspots and manage internet connection.</p>"},{"location":"documentation/tech-stack/#deployment","title":"Deployment","text":"<p>To provide an easy-to-start implementation, we are using docker to facilitate initialization and development.</p>"},{"location":"documentation/tests/","title":"How to run the tests","text":""},{"location":"documentation/tests/#tests","title":"Tests","text":"<p>In this project, two major types of tests were conducted: Unit Tests and Integration Tests.</p>"},{"location":"documentation/tests/#unitary-tests","title":"Unitary Tests","text":"<p>To run the unitary tests we can use the following commands:</p> <pre><code>mvn clean test\n</code></pre>"},{"location":"documentation/tests/#integration-tests","title":"Integration Tests","text":"<p>To run the integration:</p> <ul> <li>First, make sure the docker application is running in your system.</li> <li>Then you can run the following command: <pre><code>mvn clean verify failsafe:integration-test\n</code></pre></li> </ul>"}]}